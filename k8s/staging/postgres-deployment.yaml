apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: staging
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: staging
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine # Use the same PostgreSQL image as in Docker Compose
        ports:
        - containerPort: 5432 # Default PostgreSQL port
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: notes-config # ConfigMap name matches
              key: POSTGRES_DB # Point to the database name
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: notes-secrets # Secret name matches
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: notes-secrets # Secret name matches
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
          subPath: postgres
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service # Internal DNS name for the Order DB
  namespace: staging
  labels:
    app: postgres
spec:
  selector:
    app: postgres # Selects pods with the label app
  ports:
    - protocol: TCP
      port: 5432 # The port the service listens on (default PostgreSQL)
      targetPort: 5432 # The port on the Pod (containerPort)
  type: ClusterIP # Only accessible from within the cluster
