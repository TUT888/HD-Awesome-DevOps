apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: notes-db-pvc
  namespace: staging
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notes-db-deployment
  namespace: staging
  labels:
    app: notes-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notes-db
  template:
    metadata:
      labels:
        app: notes-db
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine # Use the same PosgreSQL image as in Docker Compose
        ports:
        - containerPort: 5432 # Default PosgreSQL port
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: notes-config # ConfigMap name matches
              key: NOTES_DB_NAME # Point to the database name
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: notes-secrets # Secret name matches
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: notes-secrets # Secret name matches
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: notes-db-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
        - name: notes-db-storage
          persistentVolumeClaim:
            claimName: notes-db-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: notes-db-service # Internal DNS name for the Order DB
  namespace: staging
  labels:
    app: notes-db
spec:
  selector:
    app: notes-db # Selects pods with the label app
  ports:
    - protocol: TCP
      port: 5432 # The port the service listens on (default PosgreSQL)
      targetPort: 5432 # The port on the Pod (containerPort)
  type: ClusterIP # Only accessible from within the cluster
